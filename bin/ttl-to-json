#!/usr/bin/env node

// Converts a TTL RDF file to JSON or JSON-LD. 

const _ = require('underscore');

const CmdlineArgs = require('command-line-args')
const Usage = require('command-line-usage')

const Fs = require('fs');

const TtlJsonLd = require('../lib/ttl-jsonld');

// Define the command line args and parse to see what we got
const CmdlineDefs = [
    { name: "help", alias: "h", type: Boolean },
    { name: "frame", alias: "f", type: String, description: "JSON-LD frame file" },
    { name: "ttlfile", alias: "t", type: String, description: "TTL RDF file to be processed" }
];

function helpAndExit(status) {
    console.log(
        Usage([
           { header:"ttl-to-json",
             content:"convert a Turtle RDF file to JSON, or to JSONLD if a frame is given." },
           { header: "Synopsis",
             content: [ "ttl-to-json -h | -t <TTL RDF File> [-f <Frame File>]" ,
                        "ttl-to-json --help | --ttlfile <TTL RDF File> [--frame <Frame File>]"] },
           { header: "Examples",
             content: [
              "   ttl-to-json -help",
              "   ttl-to-json -t file.ttl",
              "   ttl-to-json --ttlfile file.ttl --frame myFrame.frame" ]},
            { content: "Project home: [underline]{https://github.com/rdf-pipeline/translators}" }
          ]));
    process.exit(status);
}

/**
 * Read a file 
 *
 * @param filename File name 
 * @param encoding Character encoding
 */
function readFile(filename, encoding) {

    return new Promise(function(resolve, reject){
        return Fs.readFile(filename, encoding || 'utf-8', function(err, content){
            if (err) {
              console.error(err.message);
              reject(err);
            }
            else resolve(content);
        });
    });
}

/**
 * Verify file is readable 
 *
 * @param filename File name 
 */
function fileAccessible(filename) {
    try { 
       Fs.accessSync(filename, Fs.R_OK);
    } catch (e) { 
       console.error("File "+filename+" is not readable!");
       process.exit(1);
    }
} 

/**
 * Verify file exists
 *
 * @param filename File name 
 */
function fileExists(filename) {
    if (! Fs.existsSync(filename)) {
        console.error("File "+filename+" does not exist!");
        helpAndExit(1);
    }
}

var cmds;
try { 
   cmds = CmdlineArgs(CmdlineDefs); 
} catch(e) { 
   console.error(e.message);
   helpAndExit(1);
}

if (cmds.help) {
  helpAndExit(0);
}

// Verify we got the required RDF file - can't do anything without it
if ((_.isUndefined(cmds.ttlfile) || _.isNull(cmds.ttlfile))) {
    console.error("A TTL RDF file argument is required!");
    helpAndExit(1);
}
fileExists(cmds.ttlfile); 
fileAccessible(cmds.ttlfile);

// If a frame was specified, make sure we got a file name and it exists
if (!_.isUndefined(cmds.frame)) {
   if (_.isNull(cmds.frame)) {
       console.error("Frame argument requires a frame file!");
       helpAndExit(1);
   } else {
       fileExists(cmds.frame);
       fileAccessible(cmds.frame);
   }
}


// Prepare to read the RDF & frame files in parallel
var filenames = _.isUndefined(cmds.frame) ? [cmds.ttlfile] : [cmds.ttlfile, cmds.frame];
var readFiles = filenames.map(function(filename) {
  return readFile(filename, 'utf8');
});


Promise.all(readFiles).then(fileContent => { 
  var rdfText = fileContent[0];
  var frameText = undefined;
  if (fileContent.length > 1) {
      try {
          frameText = JSON.parse(fileContent[1]);
      } catch(e) { 
          console.error("Unable to parse frame JSON!");
          console.error(e);
          process.exit(1);
      }
  }

  // Load the RDF text into an RDF graph
  return new Promise(function(resolve) {

     var graph = TtlJsonLd.ttlLoad(rdfText);
     resolve(graph);

  }).then(function(graph) { 

     // Set the ids where we want to filter out blank nodes that are referenced only once. 
     // CMUMPS uses this to filter out ids that are added by the jsonld library that would  differ 
     // from the original json input on a round trip translation. 
     var filterBnodeAttrs = [ 'id', '_id', '@id' ];

     TtlJsonLd.rdfToJsonLd(graph, frameText, filterBnodeAttrs).then(json => { 
        console.log(JSON.stringify(json, null, 2)); 
     });
  });
});
