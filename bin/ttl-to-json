#!/usr/bin/env node

// Converts a TTL RDF file to JSON or JSON-LD. 

var _ = require('underscore');
var cmdlineArgs = require('command-line-args')
var fs = require('fs');

var ttlJsonLd = require('../lib/ttl-jsonld');

function help() {
    console.log(
        cli.getUsage({
            title:"ttl-to-json",
            description:"convert an Turtle RDF file to JSON, or to JSONLD if a frame is given.",
            synopsis: [
              "ttl-to-json -t <TTL RDF File> [-f <Frame File>]"
            ],
            examples: [
              "   ttl-to-json -t file.ttl",
              "   ttl-to-json -t file.ttl -f myFrame.frame",
            ],
            footer: "Project home: [underline]{https://github.com/rdf-pipeline/translators}"
          }));
}

/**
 * Read a file 
 *
 * @param filename File name 
 * @param encoding Character encoding
 */
function readFile(filename, encoding) {

    return new Promise(function(resolve, reject){
        return fs.readFile(filename, encoding || 'utf-8', function(err, content){
            if (err) {
              console.error(err.message);
              reject(err);
            }
            else resolve(content);
        });
    });
}

/**
 * Verify file is readable 
 *
 * @param filename File name 
 */
function fileAccessible(filename) {
    try { 
       fs.accessSync(filename, fs.R_OK);
    } catch (e) { 
       console.error("File "+filename+" is not readable!");
       process.exit(1);
    }
} 

/**
 * Verify file exists
 *
 * @param filename File name 
 */
function fileExists(filename) {
    if (! fs.existsSync(filename)) {
        console.error("File "+filename+" does not exist!");
        help();
        process.exit(1);
    }
}

// Define the command line args and parse to see what we got
var cli = cmdlineArgs([
  { name: "help", alias: "h", type: Boolean },
  { name: "frame", alias: "f", type: String, description: "JSON-LD frame file" },
  { name: "ttlfile", alias: "t", type: String, description: "TTL RDF file to be processed" }
]);

try { 
   var cmds = cli.parse() || {};
} catch(e) { 
   console.error(e.message);
   help();
   process.exit(1);
}

if (cmds.help) {
  help();
  process.exit(0);
}

// Verify we got the required RDF file - can't do anything without it
if ((_.isUndefined(cmds.ttlfile) || _.isNull(cmds.ttlfile))) {
    console.error("A TTL RDF file argument is required!");
    help();
    process.exit(1);
}
fileExists(cmds.ttlfile); 
fileAccessible(cmds.ttlfile);

// If a frame was specified, make sure we got a file name and it exists
if (!_.isUndefined(cmds.frame)) {
   if (_.isNull(cmds.frame)) {
       console.error("Frame argument requires a frame file!");
       help();
       process.exit(1);
   } else {
       fileExists(cmds.frame);
       fileAccessible(cmds.frame);
   }
}


// Prepare to read the RDF & frame files in parallel
var filenames = _.isUndefined(cmds.frame) ? [cmds.ttlfile] : [cmds.ttlfile, cmds.frame];
var readFiles = filenames.map(function(filename) {
  return readFile(filename, 'utf8');
});


Promise.all(readFiles).then(fileContent => { 
  var rdfText = fileContent[0];
  var frameText = undefined;
  if (fileContent.length > 1) {
      try {
          frameText = JSON.parse(fileContent[1]);
      } catch(e) { 
          console.error("Unable to parse frame JSON!");
          console.error(e);
          process.exit(1);
      }
  }

  // Load the RDF text into an RDF graph
  return new Promise(function(resolve) {

     var graph = ttlJsonLd.ttlLoad(rdfText);
     resolve(graph);

  }).then(function(graph) { 

     // Set the ids where we want to filter out blank nodes that are referenced only once. 
     // CMUMPS uses this to filter out ids that are added by the jsonld library that would  differ 
     // from the original json input on a round trip translation. 
     var filterBnodeAttrs = [ 'id', '_id', '@id' ];

     ttlJsonLd.rdfToJsonLd(graph, frameText, filterBnodeAttrs).then(json => { 
        console.log(JSON.stringify(json, null, 2)); 
     });
  });
});
